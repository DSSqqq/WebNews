"""
Django settings for news project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import keyring
from pathlib import Path
from django.conf import settings
import logging



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xh8tn3widj15m+n_rf$=hbj9z=xaookchfw=_-@l2_0bvw0a-m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    'django.contrib.flatpages',
    'fpages',
    'newsapp',
    'accounts',
    'django_filters',

    'sign',
    'protect',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'social_django',
    'allauth.socialaccount.providers.yandex',

    'django_apscheduler',

    'django_celery_beat',

]

SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'social_core.backends.yandex.YandexOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

]

ROOT_URLCONF = 'news.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



WSGI_APPLICATION = 'news.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR/'static']

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_EMAIL_VERIFICATION = 'none'

LOGIN_URL = '/sign/login/'
LOGIN_REDIRECT_URL = '/news/'
ACCOUNT_SIGNUP_REDIRECT_URL = "/sign/login/"
LOGOUT_REDIRECT_URL = "/sign/login/"
ACCOUNT_LOGOUT_REDIRECT_URL = "/sign/login/"

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

SOCIAL_AUTH_YANDEX_OAUTH2_KEY = 'your-client-id'
SOCIAL_AUTH_YANDEX_OAUTH2_SECRET = 'your-client-secret'



SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': 'ТВОЙ_CLIENT_ID_GOOGLE',
            'secret': 'ТВОЙ_CLIENT_SECRET_GOOGLE',
            'key': ''
        }
    },
    'yandex': {
        'APP': {
            'client_id': 'ТВОЙ_CLIENT_ID_YANDEX',
            'secret': 'ТВОЙ_CLIENT_SECRET_YANDEX',
            'key': ''
        }
    }
}



EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = keyring.get_password("django_email", "EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = keyring.get_password("django_email", "EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# формат даты, которую будет воспринимать наш задачник (вспоминаем модуль по фильтрам)
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как
# правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

# Настройка celery и redis

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# КЭШ

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),  # Папка для хранения кэша
        'TIMEOUT': None,  # Можно задать общий таймаут, но мы укажем его в декораторах
        'OPTIONS': {
            'MAX_ENTRIES': 1000,  # Ограничение на количество записей в кэше
        },
    }
}



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Не убиваем стандартные логгеры Django

# Форматы отоброжения логов
    'formatters': {

# форматер для файла general.log
        'file_info_format': {
            'format': '{asctime} | {levelname} | {module} | {message}',
            'style': '{',
        },
# errors.log
        'file_errors_format': {
            'format': '{asctime} | {levelname} | {message} | {pathname} | {exc_info}',
            'style': '{',
},
# security.log
        'file_security_format': {
            'format': '[SECURITY] {asctime} | {levelname} | {module} | {message}',
            'style': '{',
        },
# формат для почты (без стэка ошибок)
        'email_format': {
            'format': '{asctime} | {levelname} | {message} | {pathname}',
            'style': '{',
        },
# Консольные
        'debug_format': {
            'format': '[DEBUG] {asctime} | {levelname} | {message}',
            'style': '{',
        },
        'info_format': {
            'format': '[INFO] {asctime} | {levelname} | {module} | {message}',
            'style': '{',
        },
        'warning_format': {
            'format': '[WARNING] {asctime} | {levelname} | {message} | {pathname}',
            'style': '{',
        },
        'error_format': {
            'format': '[ERROR] {asctime} | {levelname} | {message} | {pathname} | {exc_info}',
            'style': '{',
        },
        'critical_format': {
            'format': '[CRITICAL] {asctime} | {levelname} | {message} | {pathname} | {exc_info}',
            'style': '{',
        },
    },

# Фильтры
    'filters': {

        'debug_filter': {

            '()': 'django.utils.log.CallbackFilter',  # Используем CallbackFilter
            'callback': lambda record: settings.DEBUG,  # Если DEBUG = True, пропускаем
        },
        'production_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not settings.DEBUG,  # Если DEBUG = False, пропускаем
        },

        'only_debug': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.DEBUG,
        },
        'only_info': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.INFO,
        },
        'only_warning': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.WARNING,
        },
        'only_error': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.ERROR,
        },
        'only_critical': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.CRITICAL,
        },
    },

# Обработчики для каждого уровня

# В general.log
    'handlers': {
        'file_info_handler': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'file_info_format',
            'filters': ['production_filter'],  # Только при DEBUG = False
        },
# В errors.log
        'file_error_handler': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'file_errors_format',
        },
# В security.log
        'file_security_handler': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'file_security_format',
        },
# на мыло
        'mail_error_handler':{
            'level': 'ERROR',
            'class': 'logging.handlers.SMTPHandler',
            'mailhost': ('smtp.gmail.com', 587),  # SMTP-сервер Gmail
            'fromaddr': EMAIL_HOST_USER,  # Адрес отправителя (уже установлен в DEFAULT_FROM_EMAIL)
            'toaddrs': ['danilka780@gmail.com'],  # Адреса получателей
            'subject': 'Django Error Log',  # Тема письма
            'formatter': 'email_format',  # Формат письма
            'credentials': (EMAIL_HOST_USER, EMAIL_HOST_PASSWORD),  # Учетные данные для авторизации
            'filters': ['production_filter'],  # Только при DEBUG = False
            'secure': ()
        },

# В консоль
        'debug_console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'debug_format',
            'filters': ['debug_filter', 'only_debug'],  # Фильтруем только для DEBUG = True
        },
        'info_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'info_format',
            'filters': ['debug_filter', 'only_info'],  # Фильтруем только для DEBUG = True
        },
        'warning_console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'warning_format',
            'filters': ['debug_filter', 'only_warning'],  # Фильтруем только для DEBUG = True
        },
        'error_console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'error_format',
            'filters': ['debug_filter', 'only_error'],  # Фильтруем только для DEBUG = True
        },
        'critical_console': {
            'level': 'CRITICAL',
            'class': 'logging.StreamHandler',
            'formatter': 'critical_format',
            'filters': ['debug_filter', 'only_critical'],  # Фильтруем только для DEBUG = True
        },
    },



# Логгеры для Django
    'loggers': {
        'django': {
            'handlers': ['debug_console', 'info_console', 'warning_console', 'error_console', 'critical_console',
                         'file_info_handler', 'file_error_handler', 'file_security_handler', 'mail_error_handler',],
            'level': 'DEBUG',  # Логируем от DEBUG и выше
            'propagate': False,  # Чтобы не дублировать сообщения
        },
        'django.request': {
            'handlers': ['file_error_handler', 'mail_error_handler'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['file_error_handler', 'mail_error_handler'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['file_error_handler'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file_error_handler'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['file_security_handler'],
            'level': 'WARNING',
            'propagate': False,
        },
    }
}

