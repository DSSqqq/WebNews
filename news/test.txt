LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Не убиваем стандартные логгеры Django

# Форматы отоброжения логов
    'formatters': {

# форматер для файла general.log
        'file_info_format': {
            'format': '{asctime} | {levelname} | {module} | {message}',
            'style': '{',
        },
# errors.log
        'file_errors_format': {
            'format': '{asctime} | {levelname} | {message} | {pathname} | {exc_info}',
            'style': '{',
},
# security.log
        'file_security_format': {
            'format': '[SECURITY] {asctime} | {levelname} | {module} | {message}',
            'style': '{',
        },
# формат для почты (без стэка ошибок)
        'email_format': {
            'format': '{asctime} | {levelname} | {message} | {pathname}',
            'style': '{',
        },
# Консольные
        'debug_format': {
            'format': '[DEBUG] {asctime} | {levelname} | {message}',
            'style': '{',
        },
        'info_format': {
            'format': '[INFO] {asctime} | {levelname} | {module} | {message}',
            'style': '{',
        },
        'warning_format': {
            'format': '[WARNING] {asctime} | {levelname} | {message} | {pathname}',
            'style': '{',
        },
        'error_format': {
            'format': '[ERROR] {asctime} | {levelname} | {message} | {pathname} | {exc_info}',
            'style': '{',
        },
        'critical_format': {
            'format': '[CRITICAL] {asctime} | {levelname} | {message} | {pathname} | {exc_info}',
            'style': '{',
        },
    },

# Фильтры
    'filters': {
        'only_debug': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.DEBUG,
        },
        'only_info': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.INFO,
        },
        'only_warning': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.WARNING,
        },
        'only_error': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.ERROR,
        },
        'only_critical': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.CRITICAL,
        },

        'debug_filter': {

            '()': 'django.utils.log.CallbackFilter',  # Используем CallbackFilter
            'callback': lambda record: settings.DEBUG,  # Если DEBUG = True, пропускаем
        },
        'production_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not settings.DEBUG,  # Если DEBUG = False, пропускаем
        },
    },

# Обработчики для каждого уровня

# В general.log
    'handlers': {
        'file_info_handler': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'file_info_format',
        },
# В errors.log
        'file_error_handler': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'file_errors_format',
        },
# В security.log
        'file_security_handler': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'file_security_format',
        },
# на мыло
        'mail_error_handler':{
            'level': 'ERROR',
            'class': 'logging.handlers.SMTPHandler',
            'mailhost': ('smtp.gmail.com', 587),  # SMTP-сервер Gmail
            'fromaddr': EMAIL_HOST_USER,  # Адрес отправителя (уже установлен в DEFAULT_FROM_EMAIL)
            'toaddrs': ['danilka780@gmail.com'],  # Адреса получателей
            'subject': 'Django Error Log',  # Тема письма
            'formatter': 'email_format',  # Формат письма
            'credentials': (EMAIL_HOST_USER, EMAIL_HOST_PASSWORD),  # Учетные данные для авторизации
            'filters': ['production_filter'],  # Только при DEBUG = False
        },

# В консоль
        'debug_console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'debug_format',
            'filters': ['debug_filter', 'only_debug'],  # Фильтруем только для DEBUG = True
        },
        'info_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'info_format',
            'filters': ['debug_filter', 'only_info'],  # Фильтруем только для DEBUG = True
        },
        'warning_console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'warning_format',
            'filters': ['debug_filter', 'only_warning'],  # Фильтруем только для DEBUG = True
        },
        'error_console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'error_format',
            'filters': ['debug_filter', 'only_error'],  # Фильтруем только для DEBUG = True
        },
        'critical_console': {
            'level': 'CRITICAL',
            'class': 'logging.StreamHandler',
            'formatter': 'critical_format',
            'filters': ['debug_filter', 'only_critical'],  # Фильтруем только для DEBUG = True
        },
    },



# Логгеры для Django
    'loggers': {
        'django': {
            'handlers': ['debug_console', 'info_console', 'warning_console', 'error_console', 'critical_console'],
            'level': 'INFO',  # Логируем от DEBUG и выше
            'propagate': False,  # Чтобы не дублировать сообщения
        },
        'django.request': {
            'handlers': ['file_error_handler', 'mail_error_handler'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['file_error_handler', 'mail_error_handler'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['file_error_handler'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file_error_handler'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['file_security_handler'],
            'level': 'WARNING',
            'propagate': False,
        },
    }
}